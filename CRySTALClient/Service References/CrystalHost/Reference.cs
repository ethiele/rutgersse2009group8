//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRySTALClient.CrystalHost {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TableTypes", Namespace="http://schemas.datacontract.org/2004/07/CRySTAL")]
    public enum TableTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Clean = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InUse = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dirty = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cleaning = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CannotBeUsed = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasicEmployee", Namespace="http://schemas.datacontract.org/2004/07/CRySTAL")]
    [System.SerializableAttribute()]
    public partial class BasicEmployee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string roleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string role {
            get {
                return this.roleField;
            }
            set {
                if ((object.ReferenceEquals(this.roleField, value) != true)) {
                    this.roleField = value;
                    this.RaisePropertyChanged("role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Reservation", Namespace="http://schemas.datacontract.org/2004/07/CRySTAL")]
    [System.SerializableAttribute()]
    public partial class Reservation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Table {
            get {
                return this.TableField;
            }
            set {
                if ((this.TableField.Equals(value) != true)) {
                    this.TableField = value;
                    this.RaisePropertyChanged("Table");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CrystalHost.IHostService")]
    public interface IHostService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostService/GetTables", ReplyAction="http://tempuri.org/IHostService/GetTablesResponse")]
        System.Collections.Generic.Dictionary<CRySTALClient.CrystalHost.TableTypes, int[]> GetTables(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostService/GetFreeTablesAt", ReplyAction="http://tempuri.org/IHostService/GetFreeTablesAtResponse")]
        System.Collections.Generic.Dictionary<CRySTALClient.CrystalHost.TableTypes, int[]> GetFreeTablesAt(string sessionID, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostService/AssignTableTo", ReplyAction="http://tempuri.org/IHostService/AssignTableToResponse")]
        void AssignTableTo(string sessionID, int table, int employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostService/GetWaitersOnDuty", ReplyAction="http://tempuri.org/IHostService/GetWaitersOnDutyResponse")]
        CRySTALClient.CrystalHost.BasicEmployee[] GetWaitersOnDuty(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostService/BreakReservation", ReplyAction="http://tempuri.org/IHostService/BreakReservationResponse")]
        void BreakReservation(string sessionID, int resId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostService/GetReservations", ReplyAction="http://tempuri.org/IHostService/GetReservationsResponse")]
        CRySTALClient.CrystalHost.Reservation[] GetReservations(string sessionID, System.DateTime start, System.DateTime end);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IHostServiceChannel : CRySTALClient.CrystalHost.IHostService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class HostServiceClient : System.ServiceModel.ClientBase<CRySTALClient.CrystalHost.IHostService>, CRySTALClient.CrystalHost.IHostService {
        
        public HostServiceClient() {
        }
        
        public HostServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HostServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HostServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HostServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<CRySTALClient.CrystalHost.TableTypes, int[]> GetTables(string sessionID) {
            return base.Channel.GetTables(sessionID);
        }
        
        public System.Collections.Generic.Dictionary<CRySTALClient.CrystalHost.TableTypes, int[]> GetFreeTablesAt(string sessionID, System.DateTime time) {
            return base.Channel.GetFreeTablesAt(sessionID, time);
        }
        
        public void AssignTableTo(string sessionID, int table, int employeeID) {
            base.Channel.AssignTableTo(sessionID, table, employeeID);
        }
        
        public CRySTALClient.CrystalHost.BasicEmployee[] GetWaitersOnDuty(string sessionID) {
            return base.Channel.GetWaitersOnDuty(sessionID);
        }
        
        public void BreakReservation(string sessionID, int resId) {
            base.Channel.BreakReservation(sessionID, resId);
        }
        
        public CRySTALClient.CrystalHost.Reservation[] GetReservations(string sessionID, System.DateTime start, System.DateTime end) {
            return base.Channel.GetReservations(sessionID, start, end);
        }
    }
}
