//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRySTALClient.CRySTALTimeCard {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShiftData", Namespace="http://schemas.datacontract.org/2004/07/CRySTAL")]
    [System.SerializableAttribute()]
    public partial class ShiftData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal HoursWorkedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ShiftIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeID {
            get {
                return this.EmployeeIDField;
            }
            set {
                if ((this.EmployeeIDField.Equals(value) != true)) {
                    this.EmployeeIDField = value;
                    this.RaisePropertyChanged("EmployeeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal HoursWorked {
            get {
                return this.HoursWorkedField;
            }
            set {
                if ((this.HoursWorkedField.Equals(value) != true)) {
                    this.HoursWorkedField = value;
                    this.RaisePropertyChanged("HoursWorked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ShiftID {
            get {
                return this.ShiftIDField;
            }
            set {
                if ((this.ShiftIDField.Equals(value) != true)) {
                    this.ShiftIDField = value;
                    this.RaisePropertyChanged("ShiftID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CRySTALTimeCard.ITimeCardService")]
    public interface ITimeCardService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeCardService/StampShiftStart", ReplyAction="http://tempuri.org/ITimeCardService/StampShiftStartResponse")]
        void StampShiftStart(string sessionID, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeCardService/StampShiftEnd", ReplyAction="http://tempuri.org/ITimeCardService/StampShiftEndResponse")]
        bool StampShiftEnd(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeCardService/CanStampOut", ReplyAction="http://tempuri.org/ITimeCardService/CanStampOutResponse")]
        bool CanStampOut(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeCardService/GetLastWeeksShifts", ReplyAction="http://tempuri.org/ITimeCardService/GetLastWeeksShiftsResponse")]
        CRySTALClient.CRySTALTimeCard.ShiftData[] GetLastWeeksShifts(string sessionID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ITimeCardServiceChannel : CRySTALClient.CRySTALTimeCard.ITimeCardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class TimeCardServiceClient : System.ServiceModel.ClientBase<CRySTALClient.CRySTALTimeCard.ITimeCardService>, CRySTALClient.CRySTALTimeCard.ITimeCardService {
        
        public TimeCardServiceClient() {
        }
        
        public TimeCardServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TimeCardServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeCardServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeCardServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StampShiftStart(string sessionID, string role) {
            base.Channel.StampShiftStart(sessionID, role);
        }
        
        public bool StampShiftEnd(string sessionID) {
            return base.Channel.StampShiftEnd(sessionID);
        }
        
        public bool CanStampOut(string sessionID) {
            return base.Channel.CanStampOut(sessionID);
        }
        
        public CRySTALClient.CRySTALTimeCard.ShiftData[] GetLastWeeksShifts(string sessionID) {
            return base.Channel.GetLastWeeksShifts(sessionID);
        }
    }
}
